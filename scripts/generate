#!/usr/bin/env python3

import os
import os.path as op
import glob
import sys
import yaml

import jinja2

top_path = op.dirname(op.dirname(__file__))

DEFAULT_BRANCH = 'master'

# TODO: proper logigng etc

def log(msg, *args):
    print(msg % args)


class ExtensionSpec(dict):

    @property
    def name(self):
        return self["name"]

    @property
    def branch(self):
        return self.get("branch", DEFAULT_BRANCH)

    # Some properties which might tune the value
    @property
    def github(self):
        from_spec = self.get("github", self.name.replace("_", "-"))
        gh_url = "datalad/{}".format(from_spec) \
            if '/' not in from_spec else from_spec
        return gh_url

    @property
    def githubdash(self):
        return self.github.replace("_", "-")

    @property
    def githubname(self):
        return self.github.split('/')[1]

    @property
    def pypi(self):
        return self.get("pypi", self.name.replace('_', '-'))

    @property
    def package(self):
        return self.get("package", self.name)

    @property
    def conda(self):
        return self.get('conda', self.package.replace('_', '-'))

    @property
    def apt_depends(self):
        return self.get("apt_depends", [])

    @property
    def extra_setup_steps(self):
        extras = self.get('extra_setup_steps', [])
        if extras:
            out = [f'{" " * 0 if idx == 0 else " " * 4}- {k}: {v}'
                   if k == 'name' else f'{" "*6}{k}: {v}'
                   for idx, extra in enumerate(extras) for k, v in extra.items()]
            return out

    @property
    def tester(self):
        return self.get('tester', 'pytest')

    @property
    def ci(self):
        return self.get("ci", 'Travis').lower().split(':', 1)[0]

    # unfortunately there is no badge across multiple workflows on github
    # and for now encode specific workflow in ci
    @property
    def ci_workflow(self):
        # ok to error out -- so we do not keep errors in spec
        return self.get("ci", 'Travis').lower().split(':', 1)[1]

    @property
    def ci_badge(self):
        ci = self.ci
        if ci  == 'travis':
            return f"https://travis-ci.com/{self.githubdash}.svg?branch={self.branch}"
        elif ci == 'appveyor':
            return f"https://ci.appveyor.com/api/projects/status/github/{self.github}?" \
                   f"branch={self.branch}&svg=true"
        elif ci == 'github':
            return f"https://github.com/{self.githubdash}/actions/workflows/{self.ci_workflow}.yml/badge.svg?branch={self.branch}"
        else:
            raise ValueError("Unknown Ci specification: %s" % ci)

    @property
    def ci_link(self):
        ci = self.ci
        if ci == 'travis':
            return f"https://travis-ci.com/github/{self.githubdash}"
        elif ci == 'appveyor':
            user = self.get('ci-user')
            return f"https://ci.appveyor.com/project/{user}/{self.githubname}/" \
                   f"branch/{self.branch}"
        elif ci == 'github':
            return f'https://github.com/{self.githubdash}/actions/workflows/{self.ci_workflow}.yml?query=branch%3A{self.branch}'
        else:
            raise ValueError("Unknown Ci specification: %s" % ci)

    #def __getattribute__(self, item):
    #    return self[item]


def jinja_render(tmpl, **kwargs):
    """Custom renderer, so we first replace github actions ${{ with a
    custom placeholder to avoid jinja tying to handle it
    """
    PLACEHOLDER = "[[["
    if PLACEHOLDER in tmpl:
        raise RuntimeError(
            "Detected placeholder %r already being present in the text"
            % PLACEHOLDER
        )
    tmpl_ = tmpl.replace("${{", PLACEHOLDER)
    out_ = jinja2.Template(tmpl_).render(**kwargs)
    return out_.replace(PLACEHOLDER, "${{")


def process_extension(ext_spec):
    render_kwargs = {
        "extension": ext_spec,
    }

    # TODO: proper recursive
    templates_dir = op.join(top_path, 'templates')
    for tmpl_p in glob.glob(op.join(templates_dir, '.github/*/*')):
        datalad_branches = ['master']
        if 'datalad_branch' in tmpl_p:
            datalad_branches += ['maint']
        for datalad_branch in datalad_branches:
            render_kwargs['datalad_branch'] = datalad_branch
            p = jinja_render(tmpl_p, **render_kwargs)
            if p == tmpl_p:
                log("Skipping %s since seems to be not extension specific", tmpl_p)
                continue

            with open(tmpl_p) as f:
                tmpl = f.read()
            rendered = jinja_render(tmpl, **render_kwargs)

            if rendered == tmpl:
                raise RuntimeError(
                    f"Rendered version of {tmpl_p} content is the same as template. "
                    "At the moment it is not expected"
                )

            prel_target = op.relpath(p, templates_dir)
            p_target = op.join(top_path, prel_target)
            if not op.exists(op.dirname(p_target)):
                os.makedirs(op.dirname(p_target))

            with open(p_target, "w") as f:
                f.write(rendered)

            log("Rendered %s", prel_target)


def generate_README(ext_specs):
    with open(op.join(top_path, "README.md"), "w") as f:
        f.write("""\
# DataLad healthchecks

This is a "dashboard" of various CIs of DataLad, its extensions, and underlying
3-rd party projects like git-annex.

**This README.md is autogenerated - do not edit.
  See [CONTRIBUTING.md](CONTRIBUTING.md) for more information.**

## Git-annex Status

 - Conda: ![Conda?](https://anaconda.org/conda-forge/git-annex/badges/version.svg)
    ![Updated](https://anaconda.org/conda-forge/git-annex/badges/latest_release_relative_date.svg)
    ![Platforms?](https://anaconda.org/conda-forge/git-annex/badges/platforms.svg)
 - Current snapshot build/tests + DataLad tests:
     [![Ubuntu](https://github.com/datalad/git-annex/workflows/Build%20git-annex%20on%20Ubuntu/badge.svg)](https://github.com/datalad/git-annex/actions?query=workflow%3A%22Build+git-annex+on+Ubuntu%22)
    [![macOS](https://github.com/datalad/git-annex/workflows/Build%20git-annex%20on%20macOS/badge.svg)](https://github.com/datalad/git-annex/actions?query=workflow%3A%22Build+git-annex+on+macOS%22)
    [![Windows](https://github.com/datalad/git-annex/workflows/Build%20git-annex%20on%20Windows/badge.svg)](https://github.com/datalad/git-annex/actions?query=workflow%3A%22Build+git-annex+on+Windows%22)
    [![Clients](https://raw.githubusercontent.com/datalad/git-annex-ci-client-jobs/master/badges/.all-clients.svg)](https://github.com/datalad/git-annex#client-tests)

## DataLad Status

- Distributions:
 [![DataLad GitHub release](https://img.shields.io/github/release/datalad/datalad.svg)](https://GitHub.com/datalad/datalad/releases/)
[![Anaconda](https://anaconda.org/conda-forge/datalad/badges/version.svg)](https://anaconda.org/conda-forge/datalad)
[![Arch (AUR)](https://repology.org/badge/version-for-repo/aur/datalad.svg?header=Arch%20%28%41%55%52%29)](https://repology.org/project/datalad/versions)
[![Debian Stable](https://badges.debian.net/badges/debian/stable/datalad/version.svg)](https://packages.debian.org/stable/datalad)
[![Debian Unstable](https://badges.debian.net/badges/debian/unstable/datalad/version.svg)](https://packages.debian.org/unstable/datalad)
[![Fedora Rawhide package](https://repology.org/badge/version-for-repo/fedora_rawhide/datalad.svg?header=Fedora%20%28rawhide%29)](https://repology.org/project/datalad/versions)
[![Gentoo (::science)](https://repology.org/badge/version-for-repo/gentoo_ovl_science/datalad.svg?header=Gentoo%20%28%3A%3Ascience%29)](https://repology.org/project/datalad/versions)
[![PyPI package](https://repology.org/badge/version-for-repo/pypi/datalad.svg?header=PyPI)](https://repology.org/project/datalad/versions)

 - CI:
   [![Travis maint](https://app.travis-ci.com/datalad/datalad.svg?branch=maint)](https://app.travis-ci.com/datalad/datalad)
   [![Travis master](https://app.travis-ci.com/datalad/datalad.svg?branch=master)](https://app.travis-ci.com/datalad/datalad)
   [![Appveyor maint](https://ci.appveyor.com/api/projects/status/github/datalad/datalad?branch=maint&svg=true)](https://ci.appveyor.com/project/mih/datalad/branch/maint)
   [![Appveyor master](https://ci.appveyor.com/api/projects/status/github/datalad/datalad?branch=master&svg=true)](https://ci.appveyor.com/project/mih/datalad/branch/master)
   [![Documentation](https://readthedocs.org/projects/datalad/badge/?version=latest)](http://datalad.rtfd.org)
   [![Extensions](https://github.com/datalad/datalad/actions/workflows/test_extensions.yml/badge.svg)](https://github.com/datalad/datalad/actions/workflows/test_extensions.yml)
   [![Linters](https://github.com/datalad/datalad/actions/workflows/lint.yml/badge.svg)](https://github.com/datalad/datalad/actions/workflows/lint.yml)
 - Misc:
   [![codecov.io](https://codecov.io/github/datalad/datalad/coverage.svg?branch=master)](https://codecov.io/github/datalad/datalad?branch=master)

## DataLad Extensions Status

""")
        columns = {
             'Name': 'ref',
             'Release': 'release_github',
             'PyPI Release': 'release_pypi',
             'Conda Release': 'release_conda',
             'CI: Released + DL master': 'ci_rel+dlmaster',
             'CI: Released + DL maint': 'ci_rel+dlmaint',
             'CI: develop + DL Release': 'ci_develop+dlrelease',
             'Codecov': 'codecov',
             'Issue Resolution': 'issues_restime',
             'Open Issues': 'issues_open'
        }

        def write_row(entries):
            f.write(' | '.join([''] + entries + ['']) + '\n')

        # Header
        write_row(list(columns))
        write_row(['---']*len(columns))
        # TODO: link to per-extension cron-github-CI results
        https_extension = "https://github.com/datalad/datalad-extensions"
        for ext, e in sorted(ext_specs.items()):
            entry = {
                'ref': f"[{ext}](https://github.com/{e.github})",
                'release_github':      f'[![?](https://img.shields.io/github/release/{e.githubdash}.svg)](https://GitHub.com/{e.githubdash}/releases/)',
                'release_pypi':        f'[![PyPI version fury.io](https://badge.fury.io/py/{e.pypi}.svg)](https://pypi.python.org/pypi/{e.pypi}/)',
                'release_conda':       f'![-](https://anaconda.org/conda-forge/{e.conda}/badges/version.svg)',
                'ci_rel+dlmaster':     f'[![Released+DataLad master]({https_extension}/workflows/test-{ext}-master/badge.svg)]({https_extension}/actions?query=workflow%3Atest-{ext}-master)',
                'ci_rel+dlmaint':      f'[![Released+DataLad maint]({https_extension}/workflows/test-{ext}-maint/badge.svg)]({https_extension}/actions?query=workflow%3Atest-{ext}-maint)',
                'ci_develop+dlrelease': f'[![develop+Released Datalad]({e.ci_badge})]({e.ci_link})',
                'codecov':             f'[![codecov.io](https://codecov.io/github/{e.githubdash}/coverage.svg?branch=master)](https://codecov.io/github/{e.githubdash}?branch=master)',
                'issues_restime':      f'[![Average time to resolve an issue](http://isitmaintained.com/badge/resolution/{e.githubdash}.svg)](http://isitmaintained.com/project/{e.githubdash} "Average time to resolve an issue")',
                'issues_open':         f'[![Percentage of issues still open](http://isitmaintained.com/badge/open/{e.githubdash}.svg)](http://isitmaintained.com/project/{e.githubdash} "Percentage of issues still open")',
            }
            write_row([entry[k] for k in columns.values()])
                    # [![DOI](
                    # https://zenodo.org/badge/DOI/10.5281/zenodo.3368666.svg
                    # )](https://doi.org/10.5281/zenodo.3368666)
                    # f"[![Documentation](https://readthedocs.org/projects/{
                    # e.githubname}/badge/?version=latest)](http://{e.githubname}.rtfd.org)"
                    # f"[![License: MIT](
                    # https://img.shields.io/badge/License-MIT-yellow.svg)](
                    # https://opensource.org/licenses/MIT) 


def main(extensions):
    ext_specs = load_ext_specs()

    for ext in extensions or list(ext_specs):
        process_extension(ext_specs[ext])

    # We generate/update README.md for all extensions for now
    generate_README(ext_specs)


def add_default_branch():
    # helper to add default branch if differs from 'master'
    import json
    import ruamel.yaml
    from urllib.request import Request, urlopen
    yaml = ruamel.yaml.YAML()  # defaults to round-trip if no parameters given

    with open(op.join(top_path, "extensions.yaml")) as f:
        conf = yaml.load(f.read())
    for name, rec in conf['extensions'].items():
        rec_tuned = rec.copy()
        rec_tuned['name'] = name
        ed = ExtensionSpec(rec_tuned)
        req = Request(f'https://api.github.com/repos/{ed.github}',
                     headers={'Accept': 'application/vnd.github+json'})
        with urlopen(req) as r:
            b = json.load(r)['default_branch']
        # reassign only if not "default default" i.e. master
        if b != DEFAULT_BRANCH:
            rec['branch'] = b
    with open(op.join(top_path, "extensions.yaml"), "w") as f:
        yaml.dump(conf, f)


def load_ext_specs():
    with open(op.join(top_path, "extensions.yaml")) as f:
        spec = yaml.load(f.read(), Loader=yaml.BaseLoader)
    # ATM expecting only a single structure
    assert list(spec.keys()) == ['extensions']
    ext_specs = spec["extensions"]
    for ext in list(ext_specs):
        if not ext_specs[ext]: # Was None
            # If it had nothing -- prepare it to be a dict
            ext_specs[ext] = {}
        ext_spec = ext_specs[ext] \
            = ExtensionSpec(**ext_specs[ext])
        ext_spec["name"] = ext
    return ext_specs


if __name__ == "__main__":
    # add_default_branch()
    main(sys.argv[1:])
