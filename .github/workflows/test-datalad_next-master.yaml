# This file is autogenerated from extensions.yaml using scripts/generate.
# See CONTRIBUTING.md for more information

name: test-datalad_next-master

on:
  # Trigger the workflow on pull request,
  # but only if any given extension workflow was modified
  pull_request:
    paths:
      - '.github/workflows/test-datalad_next-master.yaml'
  # all should be triggered on cron
  schedule:
    - cron: '00 05 * * *'

jobs:
  test:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        # name mimics the one in .travis.yml for datalad build introduced in
        # https://github.com/datalad/datalad/pull/4640
        annex-install-scenario: [neurodebian, datalad-git-annex-latest]
      fail-fast: false

    steps:
    - uses: actions/checkout@v1
    - name: Set up system
      shell: bash
      run: |
        bash <(wget -q -O- http://neuro.debian.net/_files/neurodebian-travis.sh)
        sudo apt-get update -qq
        sudo apt-get install eatmydata python3-pip
        sudo pip install datalad-installer
        # just not to change the name from what we had already
        case "${{ matrix.annex-install-scenario }}" in
          neurodebian)
            method=neurodebian;;
          datalad-git-annex-latest)
            method=datalad/git-annex;;
          *)
            echo "Unknown scenario ${{ matrix.annex-install-scenario }}" >&2
            exit 1
        esac
        GITHUB_TOKEN=${{ secrets.datalad_github_token }} eatmydata \
         datalad-installer --sudo ok git-annex -m "${method}"
    - name: Set up environment
      run: |
        git config --global user.email "test@github.land"
        git config --global user.name "GitHub Almighty"
    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Install DataLad (master)
      run: |
        python -m pip install --upgrade pip
        pip install https://github.com/datalad/datalad/archive/master.zip
    - name: Install datalad_next extension from PyPI ([devel])
      run: |
        pip install datalad-next[devel]
    - name: Install nose et al (just in case!)
      # Note, that we need nose even in case of pytest, due to test helpers
      # depending on it.
      run: |
        pip install nose vcrpy mock
    - name: WTF!?
      run: |
        datalad wtf
    - name: datalad_next tests
      run: |
        mkdir -p __testhome__
        cd __testhome__

        python -m nose -s -v datalad_next.patches.tests.test_push_to_export_remote:test_patch_skip_ignore_targets_export
